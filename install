#!/bin/bash
# shellcheck disable=SC2086
set -eu

# このスクリプトのディレクトリ位置を保持します。
# 戻ったり他のスクリプトの参照に使います。
script_dir_relative=$(dirname "$0")
script_dir=$(realpath "$script_dir_relative")
cd $script_dir

# 現在のシステムがWSL環境かを判定して後々の条件分岐に使用します。
is_wsl=false
if [ -e "/proc/sys/kernel/osrelease" ] && grep -q "WSL" "/proc/sys/kernel/osrelease"; then
  is_wsl=true
fi

# 現在の環境がHiDPI環境か保存します。
# 4K解像度のディスプレイの方が多いのでデフォルトではHiDPI環境として扱います。
hi_dpi=true
# 特定のホスト名の場合はHiDPI環境ではないと判定します。
if [ "$(hostname)" == "creep" ]; then
  hi_dpi=false
fi

# 指定されたファイルまたはディレクトリに対してシンボリックリンクを作成します。
# `/mnt/`以下などにマウントしても正常にパスが辿れるように、
# `cd`して相対パスで設置する回りくどい方法を取っています。
#
# 引数:
#   $1: シンボリックリンクの元となるファイルまたはディレクトリへのパス
#   $2: シンボリックリンクを作成するディレクトリへのパス
#   $3: sudoを使うかのフラグ
function create-link() {
  local real_path
  real_path=$(realpath "$1")
  local target_dir="$2"
  local is_sudo="$3"

  mkdir -p "$target_dir"
  cd "$target_dir"
  local rel_path
  rel_path=$(realpath --relative-to=. "$real_path")
  if [ "$is_sudo" = true ]; then
    set -x
    sudo ln -sfv "$rel_path" .
    set +x
  else
    set -x
    ln -sfv "$rel_path" .
    set +x
  fi
}

# 標準的なUnix環境向けに設定ファイルをコピーします。
function install-unix-conf() {
  local unix_dir="$script_dir/unix"
  cd "$unix_dir"
  local home_dir=~
  local find_dir=(home/user)

  # `/etc/`が存在しない環境で`/etc/`にマッピングしないように、
  # 存在する環境でだけマッピングします。
  if [ -d "/etc/" ]; then
    find_dir+=(etc)
  fi

  while IFS= read -r -d '' f; do
    cd "$unix_dir"
    if $is_wsl && [[ "$f" == *ioschedulers.rules ]]; then
      # WSL環境ではWindowsにIOスケジューリングを任せた方が良いようなのでスキップします。
      # `/etc/udev/rules.d/60-ioschedulers.rules:7 Failed to write ATTR{...}, ignoring: Invalid argument`
      # のようなエラーログを回避します。
      echo "skip because WSL: " $f
    elif ! $hi_dpi && [[ "$f" == ".Xresources" ]]; then
      # 現状では`.Xresources`ファイルはDPIの設定にしか使っていないため、
      # HiDPI環境でない場合はスキップします。
      echo "skip because not HiDPI: " $f
    elif [[ "$f" == home/user* ]]; then
      create-link "$f" "$(dirname ${f/home\/user/$home_dir})" false
    else
      # その他のディレクトリ(今はetcしかないですが)にはフルパスをマッピングします。
      # etcでの操作にはroot権限が必要になります。
      create-link "$f" "/$(dirname $f)" true
    fi
  done < <(find "${find_dir[@]}" -type f -print0)
}

# Git環境をセットアップします。
function install-git-conf() {
  # Git Hooksを利用可能にします。
  cd $script_dir/git-hooks/
  yarn install --immutable

  set -x
  # gitの認証情報保存設定をソフトウェアのインストール状態によって変更します。
  # WSL環境でGitのバイナリごとWindowsに投げていないのは、
  # 特定のWSL環境だとプロンプトウィンドウが一瞬表示されてしまう問題があるためです。
  cd ~/.config/git/
  if hash git-credential-libsecret 2>/dev/null; then
    # Gentooなど、git-credential-libsecretを素直にパッケージマネージャからPATHに入れられる環境。
    ln -sfv config.credential.libsecret.relative config.credential
  elif [[ -x /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret ]]; then
    # Ubuntuなど、自動でlibsecretにPATHが通らない環境。
    ln -sfv config.credential.libsecret.absolute config.credential
  elif [[ -x /Library/Developer/CommandLineTools/usr/libexec/git-core/git-credential-osxkeychain ]]; then
    # macOS。
    ln -sfv config.credential.osxkeychain.relative config.credential
  elif [[ -x /mnt/c/Program\ Files/Git/mingw64/bin/git-credential-manager.exe ]]; then
    # WSL環境など、Windows側に認証情報を任せる場合。
    # Magitから使うとコンソールがポップアップしてくるので使いたくないです。
    # 出来ればlibsecretを使います。
    ln -sfv config.credential.manager.absolute.windows.wsl config.credential
  elif [[ -x "C:\\Program Files\\Git\\mingw64\\bin\\git-credential-manager.exe" ]]; then
    # MSYS2など、Windowsネイティブで利用する場合。
    ln -sfv config.credential.manager.absolute.windows.native config.credential
  elif hash git-credential-manager 2>/dev/null; then
    # マルチプラットフォームでGCMを使う場合。
    ln -sfv config.credential.manager.relative config.credential
  else
    # いずれも使えない場合のフォールバック。
    # 早めにセットアップして入力不要にするべきです。
    ln -sfv config.credential.cache.relative config.credential
  fi
  set +x
}

# コマンドによりレジストリ的なものの設定を行います。
function install-by-command() {
  cd $script_dir
  if hash gsettings 2>/dev/null; then
    set -x
    gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'
    set +x
  fi
}

install-unix-conf
install-git-conf
install-by-command
