#!/bin/bash
# shellcheck disable=SC2046,SC2086
set -eux

# このスクリプトのディレクトリ位置を保持します。
# 戻ったり他のスクリプトの参照に使います。
dotfiles_dir=$(realpath $(dirname "$0"))
cd $dotfiles_dir

# 標準的なUnix環境向けに設定ファイルをコピーします。
function install-unix-conf() {
  unix_dir=$dotfiles_dir/unix
  cd $unix_dir
  # 現在のユーザのホームディレクトリを展開します。
  home_dir=~

  # `/etc/`が存在しない環境で`/etc/`にマッピングしないようにします。
  if [ -d "/etc/" ]; then
    find_dir=(etc home/user)
  else
    find_dir=(home/user)
  fi

  # 設定ファイルをリンクします。
  while IFS= read -r -d '' f
  do
    # 後々正しい相対パスにするために絶対パスを取得します。
    real=$(realpath $f)
    if [[ $f == home/user* ]]; then
      # home/userは~/にマッピングします。
      conf_dir=$(dirname ${f/home\/user/$home_dir})
      mkdir -p $conf_dir
      # マウントしても正常にパスが辿れるようにcdして設置する回りくどい方法を取っています。
      cd $conf_dir
      ln -sfv $(realpath --relative-to=. $real) .
    else
      # その他のディレクトリ(今はetcしかないですが)にはフルパスをマッピングします。
      conf_dir=/$(dirname $f)
      # etcでの操作にはroot権限が必要になります。
      sudo mkdir -p $conf_dir
      cd $conf_dir
      sudo ln -sfv $(realpath --relative-to=. $real) .
    fi
    cd $unix_dir
  done < <(find "${find_dir[@]}" -type f -print0)
}

# Git環境をセットアップします。
function install-git-conf() {
  # Git Hooksを利用可能にします。
  cd $dotfiles_dir/git-hooks/
  yarn install --immutable

  # gitの認証情報保存設定をソフトウェアのインストール状態によって変更します。
  # WSL環境でGitのバイナリごとWindowsに投げていないのは、
  # 特定のWSL環境だとプロンプトウィンドウが一瞬表示されてしまう問題があるためです。
  cd ~/.config/git/
  if hash git-credential-libsecret 2>/dev/null; then
    # Gentooなど、git-credential-libsecretを素直にパッケージマネージャからPATHに入れられる環境。
    ln -sfv config.credential.libsecret.relative config.credential
  elif [[ -x /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret ]]; then
    # Ubuntuなど、自動でlibsecretにPATHが通らない環境。
    ln -sfv config.credential.libsecret.absolute config.credential
  elif [[ -x /Library/Developer/CommandLineTools/usr/libexec/git-core/git-credential-osxkeychain ]]; then
    # macOS。
    ln -sfv config.credential.osxkeychain.relative config.credential
  elif [[ -x /mnt/c/Program\ Files/Git/mingw64/bin/git-credential-manager.exe ]]; then
    # WSL環境など、Windows側に認証情報を任せる場合。
    # Magitから使うとコンソールがポップアップしてくるので使いたくないです。
    # 出来ればlibsecretを使います。
    ln -sfv config.credential.manager.absolute.windows.wsl config.credential
  elif [[ -x "C:\\Program Files\\Git\\mingw64\\bin\\git-credential-manager.exe" ]]; then
    # MSYS2など、Windowsネイティブで利用する場合。
    ln -sfv config.credential.manager.absolute.windows.native config.credential
  elif hash git-credential-manager 2>/dev/null; then
    # マルチプラットフォームでGCMを使う場合。
    ln -sfv config.credential.manager.relative config.credential
  else
    # いずれも使えない場合のフォールバック。
    # 早めにセットアップして入力不要にするべきです。
    ln -sfv config.credential.cache.relative config.credential
  fi
}

# コマンドによりレジストリ的なものの設定を行います。
function install-by-command() {
  cd $dotfiles_dir
  if hash gsettings 2>/dev/null; then
    gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'
  fi
}

install-unix-conf
install-git-conf
install-by-command
